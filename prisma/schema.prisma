generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// To use, ensure that GIS is installed. One can do so by using
// `sudo apt-get install postgis`
// Then run in psql shell:
// `CREATE EXTENSION postgis;`

model Account {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  email     String   @unique
  password  String
  user      User?
}

model User {
  id                     String     @id @default(cuid())
  accountId              String     @unique
  account                Account?   @relation(fields: [accountId], references: [id])
  firstName              String
  lastName               String
  username               String     @unique
  pictures               String[]
  favoriteAnimeId        String?
  favoriteAnime          Anime?     @relation("HasFavoriteAnime", fields: [favoriteAnimeId], references: [id])
  favoriteCharacterId    String?
  favoriteCharater       Character? @relation("HasFavoriteCharacter", fields: [favoriteCharacterId], references: [id])
  bio                    String?
  latitude               Float?
  longitude              Float?
  zipcode                String
  posts                  Post[]
  sendFriendRequests     Friend[]   @relation("SentFriendRequests")
  receivedFriendRequests Friend[]   @relation("ReceivedFriendRequests")
  votingHistory          Vote[]
  lastVoteTime           DateTime?
  eventsCreated          Event[]    @relation("EventsCreated")
  eventsAttending        Event[]    @relation("AttendingEvents")
  watchingNowId          String?
  watchSelectionTime     DateTime?

  chatsStarted   ChatSession[] @relation("StartedChat")
  chatsInvitedTo ChatSession[] @relation("ReceivedChatInvite")
}

model Anime {
  id          String      @id @default(cuid())
  image       String
  title       String
  score       Float
  description String
  characters  Character[] @relation("AnimeCharacter")
  users       User[]      @relation("HasFavoriteAnime")
}

model Character {
  id        String  @id @default(cuid())
  mal_id    String?
  name      String
  image_url String
  Anime     Anime?  @relation("AnimeCharacter", fields: [mal_id], references: [id])
  users     User[]  @relation("HasFavoriteCharacter")
}

model Friend {
  id         String       @id @default(cuid())
  senderId   String
  recieverId String
  createAt   DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt
  status     FriendStatus
  reciever   User         @relation("ReceivedFriendRequests", fields: [recieverId], references: [id])
  sender     User         @relation("SentFriendRequests", fields: [senderId], references: [id])
}

model Post {
  id         String   @id @default(cuid())
  title      String
  body       String
  attachment String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  isDeleted  Boolean  @default(false)
  author     String
  authorId   User     @relation(fields: [author], references: [id])
}

model Vote {
  id         String   @id @default(cuid())
  userId     String
  animeTitle String
  voteTime   DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model Event {
  id             String   @id @default(cuid())
  creatorId      String   @unique
  creator        User     @relation("EventsCreated", fields: [creatorId], references: [id])
  attendees      User[]   @relation("AttendingEvents")
  longitude      Float?
  latitude       Float?
  locationString String   @default("")
  startDate      DateTime
  endDate        DateTime
  picture        String
  name           String
  description    String
}

model ChatSession {
  id               String     @id @default(cuid())
  createdAt        DateTime   @default(now())
  status           RoomStatus @default(PENDING)
  chatStarterId    String     @unique
  chatStarter      User       @relation("StartedChat", fields: [chatStarterId], references: [id])
  messages         Message[]
  chatParticipants User[]     @relation("ReceivedChatInvite")
}

model Message {
  id        String      @id @default(cuid())
  message   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  user      String
  sessionId String
  reactions Reaction[]
  session   ChatSession @relation(fields: [sessionId], references: [id])
}

enum FriendStatus {
  REJECTED
  ACCEPTED
  PENDING
}

enum RoomStatus {
  OPEN
  PENDING
  CLOSED
}

enum Reaction {
  LIKE
  FUNNY
  BOO
}
