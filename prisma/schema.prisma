generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  email     String
  password  String
  user      User?
}

model User {
  id                     String        @id @default(cuid())
  accountId              String        @unique
  firstName              String
  lastName               String
  username               String        @unique
  pictures               String[]
  favoriteAnimeId        String?
  favoriteCharacterId    String?
  bio                    String?
  latitude               Float
  longitude              Float
  zipcode                Int
  lastVoteTime           DateTime
  watchingNowId          String
  watchSelectionTime     DateTime
  chatsStarted           ChatSession?  @relation("StartedChat")
  eventsCreated          Event?        @relation("EventsCreated")
  receivedFriendRequests Friend[]      @relation("ReceivedFriendRequests")
  sendFriendRequests     Friend[]      @relation("SentFriendRequests")
  posts                  Post[]
  account                Account       @relation(fields: [accountId], references: [id])
  votingHistory          Vote[]
  eventsAttending        Event[]       @relation("AttendingEvents")
  chatsInvitedTo         ChatSession[] @relation("ReceivedChatInvite")
}

model Friend {
  id         String       @id @default(cuid())
  senderId   String
  recieverId String
  createAt   DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt
  status     FriendStatus
  reciever   User         @relation("ReceivedFriendRequests", fields: [recieverId], references: [id])
  sender     User         @relation("SentFriendRequests", fields: [senderId], references: [id])
}

model Post {
  id         String   @id @default(cuid())
  title      String
  body       String
  attachment String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  isDeleted  Boolean
  author     String
  authorId   User     @relation(fields: [author], references: [id])
}

model Vote {
  id         String   @id @default(cuid())
  userId     String
  animeTitle String
  voteTime   DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model Event {
  id          String   @id @default(cuid())
  creatorId   String   @unique
  longitude   Float
  latitude    Float
  startDate   DateTime
  endDate     DateTime
  name        String
  description String
  creator     User     @relation("EventsCreated", fields: [creatorId], references: [id])
  attendees   User[]   @relation("AttendingEvents")
}

model ChatSession {
  id               String     @id @default(cuid())
  createdAt        DateTime   @default(now())
  status           RoomStatus
  chatStarterId    String     @unique
  chatStarter      User       @relation("StartedChat", fields: [chatStarterId], references: [id])
  messages         Message[]
  chatParticipants User[]     @relation("ReceivedChatInvite")
}

model Message {
  id        String      @id @default(cuid())
  message   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  user      String
  sessionId String
  reactions Reaction
  session   ChatSession @relation(fields: [sessionId], references: [id])
}

enum FriendStatus {
  REJECTED
  ACCEPTED
  PENDING
}

enum RoomStatus {
  OPEN
  PENDING
  CLOSED
}

enum Reaction {
  LIKE
  FUNNY
  BOO
}
